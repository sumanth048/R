set.seed(1)
heigths2 <- rnorm(n = 10000, mean = 1.70, sd = .1)
lines(density(heigths2), col = 'red', lwd =2)
c(qnorm(.05, mean = 1.70, sd = .1),qnorm(.95, mean = 1.70, sd = .1))
x <- seq(-3,3,0.1)
plot(x=x, y=dnorm(x, mean=0, sd=1), type='l')
x <- seq(0,20,1)
plot(x=x, y=dbinom(x,20,0.5))
set.seed(123) ## set the seed for reproducibility
r <- 10000
n <- 200      ## I use 200 instead of 20 to enhance convergence to Gaussian
sample.means <- function(samps, r, n) {
rowMeans(matrix(samps,nrow=r,ncol=n))
}
library(ggplot2)
library(gridExtra)
qqplot.data <- function (vec) {
# following four lines from base R's qqline()
y <- quantile(vec[!is.na(vec)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
d <- data.frame(resids = vec)
ggplot(d, aes(sample = resids)) + stat_qq() + geom_abline(slope = slope, intercept = int, colour="red") + ggtitle("Q-Q plot")
}
generate.plots <- function(samps, samp.means) {
p1 <- qplot(samps, geom="histogram", bins=30, main="Sample Histogram")
p2 <- qplot(samp.means, geom="histogram", bins=30, main="Sample Mean Histogram")
p3 <- qqplot.data(samp.means)
grid.arrange(p1,p2,p3,ncol=2)
}
samps <- runif(r*n)  ## uniform distribution [0,1]
# compute sample means
samp.means <- sample.means(samps, r, n))
# generate plots
generate.plots(samps, samp.means)
samps <- runif(r*n)  ## uniform distribution [0,1]
# compute sample means
samp.means <- sample.means(samps, r, n)
# generate plots
generate.plots(samps, samp.means)
samps <- rpois(r*n,lambda=3)
# compute sample means
samp.means <- sample.means(samps, r, n)
# generate plots
generate.plots(samps, samp.means)
quantile(iris$Sepal.Length)
var(iris$Sepal.Length)
hist(iris$Sepal.Length)
?hist
hist(iris$Sepal.Length)
hist(iris$Sepal.Length, nClass=10)
hist(iris$Sepal.Length, nclass=10)
table(iris$Species)
pie(table(iris$Species))
barplot(table(iris$Species))
cov(iris$Sepal.Length, iris$Petal.Length)
cov(iris[,1:4])
cor(iris$Sepal.Length, iris$Petal.Length)
cor(iris[,1:4])
boxplot(Sepal.Length~Species, data=iris)
boxplot(Sepal.Length, data=iris)
boxplot(iris$Sepal.Length, data=iris)
plot(jitter(iris$Sepal.Length), jitter(iris$Sepal.Width))
pairs(iris)
library(MASS)
parcoord(iris[1:4], col=iris$Species)
library(ggplot2)
qplot(Sepal.Length, Sepal.Width, data=iris, facets=Species ~.)
qqplot
?qqplot
y <- rt(200, df = 5)
y
?rt
qqnorm(y); qqline(y, col = 2)
dim(y)
?qqline
qqline(y, col = 2)
qqnorm(y)
qqplot(y, rt(300, df = 5))
qqplot(x,y)
qqplot(x,x)
?ggplot
?ggplot2
library('ggplot2')
?ggplot
# Generate some sample data, then compute mean and standard deviation
# in each group
df <- data.frame(
gp = factor(rep(letters[1:3], each = 10)),
y = rnorm(30)
)
ds <- plyr::ddply(df, "gp", plyr::summarise, mean = mean(y), sd = sd(y))
# The summary data frame ds is used to plot larger red points on top
# of the raw data. Note that we don't need to supply `data` or `mapping`
# in each layer because the defaults from ggplot() are used.
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3)
x = rain.nyc
x=c(1.3, 2.2, 2.7, 3.1, 3.3, 3.7)
n = length(x)
plot((1:n - 1)/(n - 1), sort(x), type="l", main = "Quantiles for the NYC Rain Data", xlab = "Sample Fraction", ylab = "Sample Quantile")
x=iris$Sepal.Width
plot((1:n - 1)/(n - 1), sort(x), type="l", main = "Quantiles for the NYC Rain Data", xlab = "Sample Fraction", ylab = "Sample Quantile")
n = length(x)
plot((1:n - 1)/(n - 1), sort(x), type="l", main = "Quantiles for the NYC Rain Data", xlab = "Sample Fraction", ylab = "Sample Quantile")
demo()
q()
data(cats, package = "MASS")
m <- svm(Sex~., data = cats)
plot(m, cats)
library(e1071)
data(cats, package = "MASS")
m <- svm(Sex~., data = cats)
plot(m, cats)
data(cats, package = "MASS")
m <- svm(Sex~., data = cats)
plot(m, cats)
m$kernel
m$type
m$gamma
m$fitted
m$decision.values
m$coefs
dim(cats)
cats
data(iris)
m2 <- svm(Species~., data = iris)
plot(m2, iris, Petal.Width ~ Petal.Length,
slice = list(Sepal.Width = 3, Sepal.Length = 4))
plot(m, cats, svSymbol = 1, dataSymbol = 2, symbolPalette = rainbow(4),
color.palette = terrain.colors)
data(iris)
obj <- tune.svm(Species~., data = iris, sampling = "fix",
gamma = 2^c(-8,-4,0,4), cost = 2^c(-8,-4,-2,0))
plot(obj, transform.x = log2, transform.y = log2)
plot(obj, type = "perspective", theta = 120, phi = 45)
data(iris)
attach(iris)
## classification mode
# default with factor response:
model <- svm(Species ~ ., data = iris)
# alternatively the traditional interface:
x <- subset(iris, select = -Species)
y <- Species
model <- svm(x, y, probability = TRUE)
print(model)
summary(model)
model$coef0
model$coefs
library(mxnet)
library('rattle')
rattle()
library('rattle')
rattle()
if(null=="FEMTO"){print("hi")}else{print("bye")}
if(NA=="FEMTO"){print("hi")}else{print("bye")}
if("\nFEMTO"=="FEMTO"){print("hi")}else{print("bye")}
if("\n"=="FEMTO"){print("hi")}else{print("bye")}
if("NA"=="FEMTO"){print("hi")}else{print("bye")}
if(NA=="FEMTO"){print("hi")}else{print("bye")}
rm(list=ls(all=TRUE))
# To specify seeds
set.seed(8953)
# Taking iris data
data <- iris
head(data)
# Drop class labels (Species)
data$Species <- NULL
head(data)
dim(data)
# Running kmeans
clus <- kmeans(data, 3)
clus
clus$cluster
table(clus$cluster)
clus$size
x <- matrix(1:10, ncol = 2)
x
scale(x, scale = FALSE)
rm(x)
x = split(data, clus$cluster)
x
class(x)
class(x[[1]])
sapply(x, function(x) scale(x, scale = FALSE))
rm(x)
clus$centers
clus$cluster
clus$centers
x = clus$centers[clus$cluster,]
x
scale(x, scale = FALSE)
scale(x, scale = FALSE)^2
sum(scale(x, scale = FALSE)^2)
rm(x)
clus$betweenss
x = split(data, clus$cluster)
sapply(x, function(x) sum(scale(x, scale = FALSE)^2))
rm(x)
clus$withinss
sum(clus$withinss)
clus$tot.withinss
clus$tot.withinss +  clus$betweenss
clus$totss
# Check clustering result against class labels (Species)
table(clus$clus, iris$Species)
# Observation
#   Class "setosa" can be easily separated from the other clusters
#   Classes "versicolor" and "virginica" are to a small degree overlapped with each other.
plot(data[c("Sepal.Length", "Sepal.Width")], col = clus$cluster)
library(plotly)
packageVersion('plotly')
library(plotly)
mtcars$am[which(mtcars$am == 0)] <- 'Automatic'
mtcars$am[which(mtcars$am == 1)] <- 'Manual'
mtcars$am <- as.factor(mtcars$am)
p <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec, color = ~am, colors = c('#BF382A', '#0C4B8E'))
p <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec, color = ~am, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')))
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="scatter3d-basic")
chart_link
library("scatterplot3d")
data(iris)
head(iris)
scatterplot3d(iris[,1:3])
library("car")
library("rgl")
sep.l <- iris$Sepal.Length
sep.w <- iris$Sepal.Width
pet.l <- iris$Petal.Length
scatter3d(formula, data)
scatter3d(x, y, z)
scatter3d(x = sep.l, y = pet.l, z = sep.w)
scatter3d(x = sep.l, y = pet.l, z = sep.w)
scatter3d(x = sep.l, y = pet.l, z = sep.w,
point.col = "blue", surface=FALSE)
scatter3d(x = sep.l, y = pet.l, z = sep.w, groups = iris$Species,
grid = FALSE)
scatter3d(x = sep.l, y = pet.l, z = sep.w, groups = iris$Species,
grid = FALSE, surface=FALSE)
scatter3d(x = sep.l, y = pet.l, z = sep.w, groups = clus$cluster, grid = FALSE, surface=FALSE)
clus$cluster
scatter3d(x = sep.l, y = pet.l, z = sep.w, groups = as.factor(clus$cluster), grid = FALSE, surface=FALSE)
scatter3d(x = data["Sepal.Length"], y = data["Sepal.Width"], z = data["Petal.Length"], groups = as.factor(clus$cluster), grid = FALSE, surface=FALSE)
data
data["Sepal.Length"]
scatter3d(x = data["Sepal.Length"], y = data["Sepal.Width"], z = data["Petal.Length"], groups = as.factor(clus$cluster), grid = FALSE, surface=FALSE)
head(data["Sepal.Length"])
head(data["Sepal.Width"])
head(data["Petal.Length"])
str(data)
data$Sepal.Length
scatter3d(x = iris$Sepal.Length, y = iris$Sepal.Width, z = iris$Petal.Length, groups = as.factor(clus$cluster), grid = FALSE, surface=FALSE)
scatter3d(x = iris["Sepal.Length"], y = iris["Sepal.Width"], z = iris["Petal.Length"], groups = as.factor(clus$cluster), grid = FALSE, surface=FALSE)
scatter3d(x = iris$Sepal.Length, y = iris$Sepal.Width, z = iris$Petal.Length, groups = as.factor(clus$cluster), grid = FALSE, surface=FALSE)
set.seed(1)
set.seed(123)
library(tidyverse)
library(ggplot2)
mpg
?mpg
ggplot(data = mpg)
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)+geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(drv ~ cyl)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(. ~ cyl)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(cyl~.)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, linetype = drv))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = drv))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, linetype = drv))
?geom_smooth
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(
data = filter(mpg, class == "subcompact"),
se = FALSE
)
mpg
filter(mpg, class=="subcompact")
?geom_smooth
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
>geom_bar
?geom_bar
ggplot(data = diamonds) +
stat_count(mapping = aes(x = cut))
ggplot(data = diamonds) +
stat_prop(mapping = aes(x = cut))
`demo <- tibble(
~a, ~b,
"bar_1", 20,
"bar_2", 30,
"bar_3", 40
)
demo <- tibble(
~a, ~b,
"bar_1", 20,
"bar_2", 30,
"bar_3", 40
)
ggplot(data = demo) +
geom_bar(
mapping = aes(x = a, y = b), stat = "identity"
)
demo <- tribble(
~a, ~b,
"bar_1", 20,
"bar_2", 30,
"bar_3", 40
)
library(tibble)
demo <- tibble(
~a, ~b,
"bar_1", 20,
"bar_2", 30,
"bar_3", 40
)
ggplot(data = demo) +
geom_bar(
mapping = aes(x = a, y = b), stat = "identity"
)
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, y = ..prop.., group = 1)
)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, color = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, color = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(
data = diamonds,
mapping = aes(x = cut, fill = clarity)
) +
geom_bar(alpha = 1/5, position = "identity")
ggplot(
data = diamonds,
mapping = aes(x = cut, color = clarity)
) +
geom_bar(fill = NA, position = "identity")
nz <- map_data("nz")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black") +
coord_quickmap()
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
install.packages("tibble")
install.packages("tibble")
install.packages("maps")
library(tidyverse)
?mpg
?seq
mpg
ls()
rm(list = ls())
ls()
gc()
getwd()
setwd("C:/Users/gmanish/Downloads/openminds/code/R/")
library(tidyverse)
mpg
ggplot(data = mpg)+geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)
mpg
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)
+geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy))
diamonds
?geom_bar
library(tibble)
demo <- tibble(
~a, ~b,
"bar_1", 20,
"bar_2", 30,
"bar_3", 40
)
ggplot(data = demo) +
geom_bar(
mapping = aes(x = a, y = b), stat = "identity"
)
#Cleanup environment
rm(list = ls())
# free memory
gc()
setwd("C:/Users/gmanish/Downloads/openminds/code/R/")
library(tidyverse)
library(tibble)
demo <- tibble(
~a, ~b,
"bar_1", 20,
"bar_2", 30,
"bar_3", 40
)
library(tibble)
demo <- tibble(~a, ~b,
"bar_1", 20,
"bar_2", 30,
"bar_3", 40
)
library(tibble)
demo2 <- tibble(
~a, ~b,
"bar_1", 20,
"bar_2", 30,
"bar_3", 40
)
library(tibble)
demo2 <- tribble(
~a, ~b,
"bar_1", 20,
"bar_2", 30,
"bar_3", 40
)
ggplot(data = demo) +
geom_bar(
mapping = aes(x = a, y = b), stat = "identity"
)
library(tibble)
demo2 <- tibble(
~a, ~b,
"bar_1", 20,
"bar_2", 30,
"bar_3", 40
)
library(tibble)
demo <- tribble(
~a, ~b,
"bar_1", 20,
"bar_2", 30,
"bar_3", 40
)
ggplot(data = demo) +
geom_bar(
mapping = aes(x = a, y = b), stat = "identity"
)
ggplot(data = demo) +
geom_bar(
mapping = aes(x = a)
)
cls
library(tibble)
demo <- tribble(
~a, ~b,
"bar_1", 20,
"bar_2", 30,
"bar_3", 40
)
demo
ggplot(data = demo) +
geom_bar(
mapping = aes(x = a, y = b), stat = "identity"
)
ggplot(data = demo) +
geom_bar(
mapping = aes(x = a))
diamonds
library(maps)
nz <- map_data("nz")
nz
head(nz)
str(flights)
library(nycflights13)
str(flights)
View(flights)
arrange(flights, year, month, day)
arrange(flights, desc(arr_delay))
df <- tibble(x = c(1, NA, 3))
df
?tribble
q()
